Problem Details
● The app is a game rental that allows users to rent gaming
consoles, controllers, and game discs.
● The end-users for this Python app will be

○ Gamers
○ Sellers

Application Details
● Login/Register Functionality:

○ The user should be able to register as a Seller or a
Gamer. Please note a user can either be a Seller or
Gamer, he/she cannot be both.
○ The users should be able to log in using Username and
Password
○ Post login if the user is a seller then show the following
menu:
■ Create Product
■ Update Product
■ View all Products
■ View Product Details by ID
■ View User Profile - A seller can see only the
profiles of the gamers and not other sellers.
■ Logout

○ Post login if the user is a gamer then show the following
menu:
■ View all Product
■ Manage wishlist
■ Manage cart
■ Place order
■ Update Profile
■ View Orders
■ Logout

● Create Product Functionality:

○ The seller should be able to create a product. They can
create the product using following details:
■ ProductID - Autogenerated value to uniquely
identify a product. User should not be asked to
enter this.
■ Product Title
■ Product Type - The product type be any of the
follows: game, controller, or console.
■ Price Per Day. For eg, 100, 400 or 1000.
■ Total Stock Available

○ After the Product is created the details of that product
should be stored in the Products.json file.

● Update Product Functionality:
○ The seller should be able to update a product. They can
update the following details:
■ Product Title
■ Product Type
■ Price Per Day
■ Total Stock Available
○ In case of update functionality, based on ProductID, allow the
seller to update the details.
○ After the Product is updated the details of that product should
be stored in the Products.json file.
● View All Products Functionality:

○ If the current logged-in user is a seller then the products
created by the logged-in seller should be displayed to
him/her and not from all the sellers.
○ If the current logged-in user is a gamer then show the
list of all the products from all the sellers.
○ For each product following details need to be displayed

■ ProductID

■ Product Title
■ Product Type
■ Price Per Day
■ Total Stock Available

● Product Details Functionality:
○ Based on the product ID show only the details of that product.
● View User Profile:
○ Based on the username show all the details of the gamer.
● Manage Wishlist:
○ When a gamer selects this then show two options:
■ Add Item to Wishlist: Request user to enter productID of
the product and then add it in the logged-in gamer’s
wishlist.
■ Remove items from Wishlist: Request user to enter
productID of the product and then remove it from the
logged-in gamer’s wishlist.

○ Wishlist data will be stored in the Gamers.json file with the
gamer data.
● Manage Cart:
○ When a gamer selects this then show three options:
■ Add Item to Cart: Request user to enter the following
product details and then add it in the logged-in gamer’s
cart - ProductID, Quantity(to be purchased), Booking
Start Date(in format YYYY-MM-DD), and Booking End
Date(in format YYYY-MM-DD). Multiple items can be
added to cart by choosing this option multiple times.
■ Remove items from Cart: Request user to enter productID
of the product and then remove it from the logged-in
gamer’s cart.
■ View Cart: Show all the products in the gamer’s cart.
○ Cart data will be stored in the Gamers.json file with the gamer
data.

● Place Order Functionality:

○ When the gamer selects this option then simply place the
order for all the products in his/her cart.
○ The order total price will be calculated based on the per day
price of the products and the number of days they have been
rented.
○ Order data will be stored in the orders.json file.
● View Orders:
○ Show the list of all the orders for the current logged-in gamer.
● Update Profile:
○ Give gamer an option to update - Email, Password, or Contact
Number.

Common Functionalities:
● If any of the validations fail then show appropriate error
messages.
● Validations:
○ Length of password > 4
○ The usernames for gamer and sellers should be unique.
○ Length of contact number. = 10
○ Seller’s email should be ending with @admin.com. For
example, qaifi@admin.com
○ No empty fields
● You have to store all the data in the given JSON files.

What is already implemented in the base project?
● Registration functionality for both seller and gamer is
implemented
● Login Functionality for both seller and gamer is implemented.
● The interactive command line for application users is already
implemented.

● The code to take inputs from users is already implemented in the
commandline.py file. You DO NOT have to write extra code to take
inputs from the users.

What do you have to implement in the project for submission?
● Implement all the remaining functionalities in the operations.py
file.
● Please ensure that you update the data in the respective JSON
files. The grading team will verify the JSON files. Even if your
functionality is working if you haven’t updated the JSON file
correctly then also you will receive 0 marks for that specific
functionality.
● All the seller data will be managed in the Sellers.json file.
● All the gamer data will be managed in the Gamers.json file.
● All the product data will be managed in the Products.json file.
● All the order data will be managed in the Orders.json file.
import json
import string
import random
from json import JSONDecodeError
from datetime import datetime

def Register(type,gamers_json_file,sellers_json_file,Email_ID,Username,Password,Contact_Number):
    '''Register Function || Already Given'''
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='gamer':
        f=open(gamers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
            "Wishlist":[],
            "Cart":[],
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()

def Login(type,gamers_json_file,sellers_json_file,Username,Password):
    '''Login Functionality || Return True if successfully logged in else False || Already Given'''
    d=0
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
    else:
        f=open(gamers_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Username"]==Username and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID || Already Given'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID || Already Given'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def days_between(d1, d2):
    '''Calculating the number of days between two dates || Already Given'''
    d1 = datetime.strptime(d1, "%Y-%m-%d")
    d2 = datetime.strptime(d2, "%Y-%m-%d")
    return abs((d2 - d1).days)

def Create_Product(owner,product_json_file,product_ID,product_title,product_type,price_per_day,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    '''Write your code below'''
    dict98 = {
    "Seller Username": owner,
    "Product ID": product_ID,
    "Product Title": product_title,
    "Product Type": product_type,
    "Price Per Day": price_per_day,
    "Total Stock Available": total_stock_available
    }
    with open(product_json_file,'r+') as f:
        try:
            content = json.load(f)
            if dict98 not in content:
                content.append(dict98)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
            else:
                return False
        except JSONDecodeError:
            level = []
            level.append(dict98)
            json.dump(level,f)
    return True
    

def Fetch_all_Products_created_by_seller(owner,product_json_file):
    '''Get all products created by the seller(owner)'''
    '''Write your code below'''
    level = []
    with open(product_json_file,'r') as f:
        content = json.load(f)
        for product in content:
            if product["Seller Username"] == owner:
                level.append(product)
    return level

def Fetch_all_products(products_json_file):
    '''Get all products created till now || Helper Function || Already Given'''
    All_Products_list=[]
    f=open(products_json_file,'r')
    try:
        content=json.load(f)
        All_Products_list=content
    except JSONDecodeError:
        pass
    return All_Products_list

def Fetch_Product_By_ID(product_json_file,product_ID):
    '''Get product deatils by product ID'''
    '''Write your code below'''
    with open(product_json_file,'r') as f:
        level=[]
        try:
            content = json.load(f)
            for product in content:
                if product["Product ID"] == product_ID:
                    level.append(product)
                    return level
        except JSONDecodeError:
            pass
        return level

def Update_Product(Username,product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    '''Write your code below'''
    with open(product_json_file,'r+') as f:
        try:
            content = json.load(f)
            for i in range(len(content)):
                if content[i]["Seller Username"] == Username and content[i]["Product ID"] == product_ID:
                    try:
                        a = content[i][detail_to_be_updated]
                    except KeyError:
                        return False
                    content[i][detail_to_be_updated] = new_value
                    f.seek(0)
                    f.truncate()
                    json.dump(content,f)
                    return True
        except JSONDecodeError:
            return False

def Add_item_to_wishlist(Username,product_ID,gamers_json_file):
    '''Add Items to wishlist || Return True if added successfully else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            content = json.load(f)
            for i in range(len(content)):
                if content[i]["Username"] == Username:
                    if product_ID not in content[i]["Wishlist"]:
                        content[i]["Wishlist"].append(product_ID)
                        f.seek(0)
                        f.truncate()
                        json.dump(content,f)
                        return True
            else:
                return False
        except JSONDecodeError:
            return False

def Remove_item_from_wishlist(Username,product_ID,gamers_json_file):
    '''Remove items from wishlist || Return True if removed successfully else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            var = json.load(f)
            for i in range(len(var)):
                if var[i]["Username"] == Username:
                    if product_ID in var[i]["Wishlist"]:
                        var[i]["Wishlist"].remove(product_ID)
                        f.seek(0)
                        f.truncate()
                        json.dump(var,f)
                        return True
                    else:
                        return False
            else:
                return False
        except JSONDecodeError:
            return False


def Add_item_to_cart(Username,product_ID,Quantity,gamers_json_file,booking_start_date,booking_end_date,products_json_file):
    '''Add item to the cart || Check whether the quantity mentioned is available || Return True if added successfully else False'''
    '''Add the Product ID, Quantity, Price, Booking Start Date, Booking End Date in the cart as list of dictionaries'''
    '''Write your code below'''
    with open(products_json_file,'r') as pd, open(gamers_json_file,'r+') as gd:
        try:
            pvar = json.load(pd)
            gvar = json.load(gd)
            for product in pvar:
                if product["Product ID"] == product_ID and product["Total Stock Available"] >= Quantity:
                    dict98 = {
                        "Product ID": product_ID,
                        "Quantity": Quantity,
                        "Price": product["Price Per Day"],
                        "Booking Start Date": booking_start_date,
                        "Booking End Date": booking_end_date
                    }
                    for i in range(len(gvar)):
                        if gvar[i]["Username"] == Username:
                            gvar[i]["Cart"].append(dict98)
                            gd.seek(0)
                            gd.truncate()
                            json.dump(gvar,gd)
                            return True
                    else:
                        return False
            else:
                return False
        except JSONDecodeError:
            return False

def Remove_item_from_cart(Username,product_ID,gamers_json_file):
    '''Remove items from the cart || Return True if removed successfully else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            var = json.load(f)
            for i in range(len(var)):
                if var[i]["Username"] == Username:
                    for product in var[i]["Cart"]:
                        if product["Product ID"] == product_ID:
                            var[i]["Cart"].remove(product)
                            f.seek(0)
                            f.truncate()
                            json.dump(var,f)
                            return True
                    else:
                        return False
            else:
                return False
        except JSONDecodeError:
            return False

def View_Cart(Username,gamers_json_file):
    '''Return the current cart of the user'''
    '''Write your code below'''
    with open(gamers_json_file,'r') as f:
        try:
            var = json.load(f)
            for gamer in var:
                if gamer["Username"] == Username:
                    return gamer["Cart"]
        except JSONDecodeError:
            pass


def Place_order(Username,gamers_json_file,Order_Id,orders_json_file,products_json_file):
    '''Place order || Return True is order placed successfully else False || Decrease the quantity of the product orderd if successfull'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as gd, open(orders_json_file,'r+') as od, open(products_json_file,'r+') as pd:
        try:
            gvar = json.load(gd)
            ovar = json.load(od)
            pvar = json.load(pd)
            for i in range(len(gvar)):
                if gvar[i]["Username"] == Username:
                    order = {
                        "Order ID": Order_Id,
                        "Ordered by": Username,
                        "Items": gvar[i]["Cart"]
                    }
                    Total_cost = 0
                    for product in gvar[i]["Cart"]:
                        booking_start_date = datetime.strptime(product["Booking Start Date"], "%Y-%m-%d")
                        booking_end_date = datetime.strptime(product["Booking End Date"], "%Y-%m-%d")
                        days = (booking_end_date-booking_start_date).days
                        Total_cost += days * product["Price"]*product["Quantity"]
                        for j in range(len(pvar)):
                            if pvar[j]["Product ID"] == product["Product ID"]:
                                pvar[j]["Total Stock Available"] -= product["Quantity"]
                    order["Total Cost"] = Total_cost
                    ovar.append(order)
                    gd.seek(0)
                    gd.truncate()
                    json.dump(gvar,gd)
                    od.seek(0)
                    od.truncate()
                    json.dump(ovar,od)
                    pd.seek(0)
                    pd.truncate()
                    json.dump(pvar,pd)
                    return True
            else:
                return False
        except JSONDecodeError:
            return False


def View_User_Details(gamers_json_file,Username):
    '''Return a list with all gamer details based on the username || return an empty list if username not found'''
    '''Write your code below'''
    with open(gamers_json_file,'r') as f:
        l = []
        try:
            var = json.load(f)
            for gamer in var:
                if gamer["Username"] == Username:
                    l.append(gamer)
                    return l
        except JSONDecodeError:
            pass
        return l

def Update_User(gamers_json_file,Username,detail_to_be_updated,updated_detail):
    '''Update the detail_to_be_updated of the user to updated_detail || Return True if successful else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            var = json.load(f)
            for i in range(len(var)):
                if var[i]["Username"] == Username:
                    try:
                        a = var[i][detail_to_be_updated]
                    except KeyError:
                        return False
                    var[i][detail_to_be_updated] = updated_detail
                    f.seek(0)
                    f.truncate()
                    json.dump(var,f)
                    return True
            else:
                return False
        except JSONDecodeError:
            return False

def Fetch_all_orders(orders_json_file,Username):
    '''Fetch all previous orders for the user and return them as a list'''
    '''Write your code below'''
    with open(orders_json_file,'r') as f:
        l=[]
        try:
            var = json.load(f)
            for order in var:
                if order["Ordered by"] == Username:
                    l.append(order)
        except JSONDecodeError:
            pass
        return l

    
    

